const task1 = 'number' + 3 + 3; 
console.log(task1);
// відповідь: 'number33'
// оператор + обробляється зліва направо (лівостороння асоціативність)
// оскільки один з операндів є рядком, операція + викликає конкатенацію
// спочатку виконується конкатенація рядку 'number' з цифрою 3, що дає в 
// результаті 'number3', до якого додається наступна '3'


const task2 = null + 3;
console.log(task2);
// відповідь: 3
// null це спец значення, що у числовому контексті перетворюється на 0.
// тому 0+3 буде дорівнювати 3


const task3 = 5 && "qwerty"; 
console.log(task3);
// відповідь: 'qwerty'
// оператор && повертає перше неістинне або (якщо немає неістинн) останнє істинне значення.
// 5 це істинне значення (будь яке ненульове число в JS вважається істинним), 
// а 'qwerty' також істинне (бо будь який непорожній рядок в JS також вважається істинним), 
// результатом буде другий (останній) операнд 'qwerty'


const task4 = +'40' + +'2' + "hillel"; 
console.log(task4);
// відповідь: '42hillel'
// унарний + перетворює рядки на числа. 
// + перед рядком '40' перетворює його на число 40, + перед '2' робить те ж саме. 
// в результаті 40 + 2 дає 42. 
// потім число 42 перетворюється на рядок, і відбувається конкатенація цього рядка з 'hillel', 
// в результаті ми отримуємо '42hillel'


const task5 = '10' - 5 === 6;
console.log(task5);
// відповідь: false
// оператор мінус примусово перетворює рядок '10' на число 10, 
// тому що оператор мінус не підтримує конкатенацію.
// 10 - 5 дає результат 5. 
// === це суворе порівняння, і 5 не дорівнює 6. тому результат цього порівняння буде false


const task6 = true + false;
console.log(task6);
// відповідь: 1
// true перетворюється на число 1, а false на число 0.
// 1 + 0 дає результат 1


const task7 = '4px' - 3; 
console.log(task7);
// відповідь: NaN
// рядок '4px' не може бути перетворений у число через наявність у ньому символів.
// мінус перетворюючи '4px' у число отримує NaN.
// NaN - 3 також дає NaN, оскільки будь які операції з NaN завжди дають NaN


const task8 = '4' - 3; 
console.log(task8);
// відповідь: 1
// '4' це рядок, але оператор мінус перетворює його на число 4.
// 4 - 3 = 1


const task9 = '6' + 3 ** 0; 
console.log(task9);
// відповідь: '61'
// оператор ступінь має вищий пріоритет за оператор +,
// тому спочатку виконується ступінь, а потім виконується конкатенація.
// 3 ** 0 дорівнює 1. далі виконується конкатенація 6 + 1, оскільки '6' це рядок. результат буде '61'


const task10 = 12 / '6'; 
console.log(task10);
// відповідь: 2
// '6' це рядок, який оператор / переводить до числа 6.
// 12 / 6 дає у відповідь число 2


const task11 = '10' + (5 === 6); 
console.log(task11);
// відповідь: '10false'
// === це суворе порівняння, 5 не дорівнює 6, тому результат буде false.
// '10' + false виконується конкатенація рядка '10' і false, 
// яке перетворюється на рядок 'false'. результат буде рядок '10false'


const task12 = null == ''; 
console.log(task12);
// відповідь: false
// оператор == перевіряє нестрогу рівність.null може бути рівний лише null або undefined.
// '' не дорівнює null, тому результатом буде false


const task13 = 3 ** (9 / 3); 
console.log(task13);
// відповідь: 27
// дужки в JS мають найвищий пріоритет, тому спочатку виконується операція 9 / 3, що дорівнює 3.
// а 3 ** 3 дає результат 27


const task14 = !!'false' == !!'true'; 
console.log(task14);
// відповідь: true
// операція !! застосовується для перетворення значень до булевого типу.
// 'false' є істинним значенням, тому що це не порожній рядок, тому !!'false' дає в результаті true.
// 'true' також є непорожнім рядком, і воно також істинне, тому !!'true' також дає true.
// і true == true. тому порівняння буде істинним


const task15 = 0 || '0' && 1;
console.log(task15);
// відповідь: 1
// оператор && має вищий пріоритет, ніж ||, тому спочатку виконується '0' && 1.
// '0' істинне значення, бо це непорожній рядок. оператор && перевірить наступний операнд 1, 
// що також істинне. оскільки && повертає останнє істинне значення, якщо всі операнди істинні, результат буде 1.
// далі вираз 0 || 1.
// оператор || повертає перше істинне значення.
// 0 хибне значення, тому результатом буде 1


const task16 = (+null == false) < 1; 
console.log(task16);
// відповідь: false
// +null перетворює null у 0.
// 0 == false не є строгою рівністю, тому результатом буде true.
// потім перевіряємо true < 1, де true перетворюється на 1. отже 1 < 1 буде поверне false


const task17 = false && true || true; 
console.log(task17);
// відповідь: true
// оператор && має вищий пріоритет, ніж ||, тому спочатку виконується false && true.
// && перевіряє значення зліва направо по черзі (як і ||), і першочергово повертає неістинне значення (проте якщо всі
// операнди істинні, він поверне останнє істинне). отже тут в false && true він поверне false.
// отримаємо false || true. оператор || повертає перше істинне значення (а якщо їх немає, то останнє неістинне)
// перший операнд у нас false, другий true, тому результат буде true


const task18 = false && (false || true);
console.log(task18);
// відповідь: false
// спочатку виконується операція в дужках (false || true), бо дужки в JS мають найвищий пріоритет.
// і так як оператор || повертає перше істинне значення, результат буде true.
// далі false && true, оператор && повертає false, тому що && повертає перше неістинне значення


const task19 = (+null == false) < 1 ** 5;
console.log(task19);
// відповідь: false
// спочатку виконується операція в дужках, +null (унарний плюс) перетворює null у 0, 
// оператор == не перевіряє типи, тому false також перетворюється на 0, результатом 0 == false поверне true.
// отримаємо вираз true < 1 ** 5. ** має високий пріоритет, тому обчислюється спочатку, 1 ** 5 = 1.
// тепер отримуємо true < 1, де true перетворюється на 1. отже 1 < 1 поверне результат false

